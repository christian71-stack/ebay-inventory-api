<?php
/**
 * Regulatory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ebay\Sell\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Inventory API
 *
 * The Inventory API is used to create and manage inventory, and then to publish and manage this inventory on an eBay marketplace. There are also methods in this API that will convert eligible, active eBay listings into the Inventory API model.
 *
 * OpenAPI spec version: 1.17.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.51
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ebay\Sell\Inventory\Model;

use \ArrayAccess;
use \Ebay\Sell\Inventory\ObjectSerializer;

/**
 * Regulatory Class Doc Comment
 *
 * @category Class
 * @description Type defining regulatory information that the seller is required to disclose.
 * @package  Ebay\Sell\Inventory
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Regulatory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Regulatory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'energy_efficiency_label' => '\Ebay\Sell\Inventory\Model\EnergyEfficiencyLabel',
        'hazmat' => '\Ebay\Sell\Inventory\Model\Hazmat',
        'repair_score' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'energy_efficiency_label' => null,
        'hazmat' => null,
        'repair_score' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'energy_efficiency_label' => 'energyEfficiencyLabel',
        'hazmat' => 'hazmat',
        'repair_score' => 'repairScore'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'energy_efficiency_label' => 'setEnergyEfficiencyLabel',
        'hazmat' => 'setHazmat',
        'repair_score' => 'setRepairScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'energy_efficiency_label' => 'getEnergyEfficiencyLabel',
        'hazmat' => 'getHazmat',
        'repair_score' => 'getRepairScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['energy_efficiency_label'] = isset($data['energy_efficiency_label']) ? $data['energy_efficiency_label'] : null;
        $this->container['hazmat'] = isset($data['hazmat']) ? $data['hazmat'] : null;
        $this->container['repair_score'] = isset($data['repair_score']) ? $data['repair_score'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets energy_efficiency_label
     *
     * @return \Ebay\Sell\Inventory\Model\EnergyEfficiencyLabel
     */
    public function getEnergyEfficiencyLabel()
    {
        return $this->container['energy_efficiency_label'];
    }

    /**
     * Sets energy_efficiency_label
     *
     * @param \Ebay\Sell\Inventory\Model\EnergyEfficiencyLabel $energy_efficiency_label energy_efficiency_label
     *
     * @return $this
     */
    public function setEnergyEfficiencyLabel($energy_efficiency_label)
    {
        $this->container['energy_efficiency_label'] = $energy_efficiency_label;

        return $this;
    }

    /**
     * Gets hazmat
     *
     * @return \Ebay\Sell\Inventory\Model\Hazmat
     */
    public function getHazmat()
    {
        return $this->container['hazmat'];
    }

    /**
     * Sets hazmat
     *
     * @param \Ebay\Sell\Inventory\Model\Hazmat $hazmat hazmat
     *
     * @return $this
     */
    public function setHazmat($hazmat)
    {
        $this->container['hazmat'] = $hazmat;

        return $this;
    }

    /**
     * Gets repair_score
     *
     * @return float
     */
    public function getRepairScore()
    {
        return $this->container['repair_score'];
    }

    /**
     * Sets repair_score
     *
     * @param float $repair_score This field represents the repair index for the listing.<br><br>The repair index identifies the manufacturer's repair score for a product (i.e., how easy is it to repair the product.) This field is a floating point value between 0.0 (i.e., difficult to repair,) and 10.0 (i.e., easily repaired.)<br><br>The format for <b>repairScore</b> is limited to one decimal place. For example:<ul><li><code>7.9</code> and <code>0.0</code> are both valid scores</li><li><code>5.645</code> and <code>2.10</code> are both invalid scores</li></ul><br><span class=\"tablenote\"><b>Note:</b> Repair score is not applicable to all categories. Use the <a href=\"/api-docs/sell/metadata/resources/marketplace/methods/getExtendedProducerResponsibilityPolicies\" target=\"_blank\">getExtendedProducerResponsibilityPolicies</a> method of the <b>Metadata API</b> to see where repair score is applicable.</span>
     *
     * @return $this
     */
    public function setRepairScore($repair_score)
    {
        $this->container['repair_score'] = $repair_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
